#ifndef __J_INCuBATOR_H__
#define __J_INCuBATOR_H__
#include <asm/ioctls.h>
#include <errno.h>
#include <fcntl.h>
#include <math.h>
#include <net/if.h>
#include <netinet/in.h>
#include <pthread.h>
#include <resolv.h>
#include <signal.h>
#include <signal.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <termios.h>
#include <unistd.h>
#include "md5_file.h"
#include "../zlog/zlog.h"
#include "jshmem.h"
#include "define.h"
#include "serial.h"

//----------------------------------------------------------------------------------------------------------
// INI配置结构体
//----------------------------------------------------------------------------------------------------------
struct incubator_t
{
    char device_id[256];
    char conf_zlog_file[256];
    char conf_sysc_file[256];

    char serial_device[256];

    int shmem_input_key;
    int shmem_output_key;
    int shmem_record_len;
    int shmem_record_num;

    char db_setting_ip[256];
    char db_setting_user[256];
    char db_setting_passwd[256];
    char db_setting_name[256];
};
//----------------------------------------------------------------------------------------------------------
// 获取参数
//----------------------------------------------------------------------------------------------------------
short get_val(unsigned short index);
short get_old(unsigned short index);
unsigned short get_uval(unsigned short index);
unsigned short get_uold(unsigned short index);
float get_fval(unsigned short index);
double get_dval(unsigned short index);
short get_x10_val(unsigned short index);
short get_e10_val(unsigned short index);

//----------------------------------------------------------------------------------------------------------
// 设置参数
//----------------------------------------------------------------------------------------------------------
void set_val(unsigned short index, short data);
void set_old(unsigned short index, short data);
void set_uval(unsigned short index, unsigned short data);
void set_uold(unsigned short index, unsigned short data);
void set_fval(unsigned short index, float data);
void set_fold(unsigned short index, float data);
void set_dval(unsigned short index, double data);
void set_dold(unsigned short index, double data);
void mem_val(unsigned short index, void *data, unsigned short len);

//----------------------------------------------------------------------------------------------------------
// 功能函数
//----------------------------------------------------------------------------------------------------------
// INI文件初始化
//----------------------------------------------------------------------------------------------------------
void init_ini_file(const char *ini_path, struct incubator_t *st_incubator);

//----------------------------------------------------------------------------------------------------------
// ZLOG日志初始化
//----------------------------------------------------------------------------------------------------------
int init_zlog_file(zlog_category_t **zlog_zc, const char *conf_zlog_file, const char *process_name);
//----------------------------------------------------------------------------------------------------------
// 初始化参数
//----------------------------------------------------------------------------------------------------------
void init_para();

//----------------------------------------------------------------------------------------------------------
// 将共享内存写入INI文化中
//----------------------------------------------------------------------------------------------------------
int syn_shm_to_ini(const char *file_name, unsigned short index, int size);

//----------------------------------------------------------------------------------------------------------
// 从INI文件同步数据到共享内存
//----------------------------------------------------------------------------------------------------------
int syn_ini_to_shm(const char *file_name, unsigned short index, int size);

//----------------------------------------------------------------------------------------------------------
// 从共享内存获取当前时间
//----------------------------------------------------------------------------------------------------------
unsigned int get_time(unsigned short addr);

//----------------------------------------------------------------------------------------------------------
// 将当前时间保存到共享内存中
//----------------------------------------------------------------------------------------------------------
void set_time(unsigned short addr, unsigned int time);

//----------------------------------------------------------------------------------------------------------
// 控制函数
//----------------------------------------------------------------------------------------------------------
// 运行灯控制
//----------------------------------------------------------------------------------------------------------
void control_run_light(int status);

//----------------------------------------------------------------------------------------------------------
// 报警灯控制
//----------------------------------------------------------------------------------------------------------
void control_warn_light(int status);

//----------------------------------------------------------------------------------------------------------
// 响铃控制
//----------------------------------------------------------------------------------------------------------
void control_electric_light(int status);

//----------------------------------------------------------------------------------------------------------
// 主加热控制
//----------------------------------------------------------------------------------------------------------
void control_main_heat(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 辅助加热控制
//----------------------------------------------------------------------------------------------------------
void control_aux_heat(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 风机运行控制
//----------------------------------------------------------------------------------------------------------
void control_fan(int status);

//----------------------------------------------------------------------------------------------------------
// 水冷电磁阀2-1
//----------------------------------------------------------------------------------------------------------
void control_cool2_1(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 水冷电磁阀2-2
//----------------------------------------------------------------------------------------------------------
void control_cool2_2(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 水冷电磁阀2-3
//----------------------------------------------------------------------------------------------------------
void control_cool2_3(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 水冷电磁阀2-4
//----------------------------------------------------------------------------------------------------------
void control_cool2_4(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 水冷电磁阀2
//----------------------------------------------------------------------------------------------------------
void control_cool2(int mode, int type, int status);

//----------------------------------------------------------------------------------------------------------
// 冷热水电磁阀
//----------------------------------------------------------------------------------------------------------
void control_cold_hot_water(int status);

//----------------------------------------------------------------------------------------------------------
// 鼓风机
//----------------------------------------------------------------------------------------------------------
void control_blower(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 风门开控制
//----------------------------------------------------------------------------------------------------------
void control_open_damper(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 风门关控制
//----------------------------------------------------------------------------------------------------------
void control_close_damper(int mode, int status, int schedule);

//----------------------------------------------------------------------------------------------------------
// 风门控制
//----------------------------------------------------------------------------------------------------------
void control_damper(int mode, int type, int status, int schedule);

//----------------------------------------------------------------------------------------------------------
// 水冷控制
//----------------------------------------------------------------------------------------------------------
void control_cool(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 加湿电磁阀控制
//----------------------------------------------------------------------------------------------------------
void control_spray(int mode, int status);

//----------------------------------------------------------------------------------------------------------
// 翻蛋控制
//----------------------------------------------------------------------------------------------------------
void control_egg(int mode);

//----------------------------------------------------------------------------------------------------------
// 线程函数
//----------------------------------------------------------------------------------------------------------
// 线程 备份线程
//----------------------------------------------------------------------------------------------------------
void *sysn_thread_func(void *pv);

//----------------------------------------------------------------------------------------------------------
// 数据采集线程-PT100
//----------------------------------------------------------------------------------------------------------
void *data_collection_pt100_func(void *pv);

//----------------------------------------------------------------------------------------------------------
// 数据采集线程-CO2
//----------------------------------------------------------------------------------------------------------
void *data_collection_co2_func(void *pv);

#endif //__J_INCuBATOR_H__